@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using FormGenerator.Services.Interfaces
@using System.Text.Json
@using FormGenerator.Models
@using MudBlazor

@inject IFormGenerationService FormGenerationService
@inject IJsonLoaderService JsonLoaderService

@page "/"

<MudContainer>
    <MudText Typo="Typo.h4" Class="my-4">@formModel.Title</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (hasError)
    {
        <MudAlert Severity="Severity.Error" Title="@("Form Configuration Error")" Class="my-4">
            <MudText>There was a problem loading the form configuration.</MudText>

            <MudExpansionPanels>
                <MudExpansionPanel Text="Show Details">
                    <MudText Typo="Typo.body2">@errorMessage</MudText>
                </MudExpansionPanel>
            </MudExpansionPanels>

            <div Class="mt-3">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ReloadForm">Retry</MudButton>
            </div>
        </MudAlert>
    }
    else
    {
        <EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit" FormName="dynamicForm">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <!-- Dynamically Generated Text/Email/Number Input Fields -->
                        @foreach (var field in formModel.InputFields)
                        {
                            <MudItem xs="12" sm="6">
                                @if (field.InputType == "number")
                                {
                                    <MudNumericField T="int?"
                                                     Label="@field.Label"
                                                     Required="@field.IsRequired"
                                                     Min="@field.Min"
                                                     Max="@field.Max"
                                                     @bind-Value="@numericValues[field.Id]"
                                                     OnBlur="@(() => UpdateNumericFieldValue(field))" />
                                }
                                else if (field.InputType == "email")
                                {
                                    <MudTextField @bind-Value="field.Value"
                                                  Label="@field.Label"
                                                  Required="@field.IsRequired"
                                                  InputType="InputType.Email"
                                                  Validation="@GetEmailValidator(field)" />
                                }
                                else
                                {
                                    <MudTextField @bind-Value="field.Value"
                                                  Label="@field.Label"
                                                  Required="@field.IsRequired" />
                                }
                            </MudItem>
                        }

                        <!-- Dynamically Generated Dropdown Fields -->
                        @foreach (var dropdown in formModel.DropdownFields)
                        {
                            <MudItem xs="12" sm="6">
                                <MudSelect T="string"
                                           Label="@dropdown.Label"
                                           Required="@dropdown.IsRequired"
                                           @bind-Value="dropdown.SelectedValue">
                                    @foreach (var option in dropdown.Options)
                                    {
                                        <MudSelectItem Value="@option">@option</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        }

                        <!-- Dynamically Generated Checkbox Fields -->
                        @foreach (var checkbox in formModel.CheckboxFields)
                        {
                            <MudItem xs="12">
                                <MudCheckBox @bind-Value="checkbox.IsChecked"
                                             Label="@checkbox.Label"
                                             Color="Color.Primary" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Submit</MudButton>
                    <MudButton OnClick="ResetForm" Variant="Variant.Outlined" Color="Color.Secondary">Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>

        @if (showFormData)
        {
            <MudPaper Class="mt-4 pa-4">
                <MudText Typo="Typo.h6">Form Data (JSON):</MudText>
                <MudTextField @bind-Value="formDataJson"
                              ReadOnly="true"
                              Lines="10"
                              Variant="Variant.Outlined"
                              FullWidth="true" />
            </MudPaper>
        }
    }
</MudContainer>

@code {
    private FormModel formModel = new FormModel();
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = string.Empty;
    private bool showFormData = false;
    private string formDataJson = string.Empty;
    private Dictionary<string, int?> numericValues = new Dictionary<string, int?>();

    // Path to the JSON file in wwwroot
    private const string JsonFilePath = "formConfig.json";

    private FormModel originalFormModel = new FormModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load JSON from the wwwroot folder
            string jsonContent = await JsonLoaderService.LoadJsonFromWwwrootAsync(JsonFilePath);

            // Generate form model from the loaded JSON
            formModel = await FormGenerationService.GenerateFormFromJsonAsync(jsonContent);

            // Create a deep copy for reset functionality
            originalFormModel = CloneFormModel(formModel);

            // Initialize numeric fields dictionary
            foreach (var field in formModel.InputFields)
            {
                if (field.InputType == "number")
                {
                    if (int.TryParse(field.Value, out int val))
                    {
                        numericValues[field.Id] = val;
                    }
                    else
                    {
                        numericValues[field.Id] = null;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.ToString();
            Console.Error.WriteLine($"Error loading form configuration: {ex.Message}");
            // Initialize with empty model in case of error
            formModel = new FormModel { Title = "Error Loading Form" };
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        // Reset form to original values by creating a deep copy of the original model
        // This is necessary because C# passes objects by reference, and we need to ensure
        // the original model hasn't been modified by user interactions
        formModel = CloneFormModel(originalFormModel);

        // The numericValues dictionary is a separate state used by MudNumericField components,
        // so we need to reset it separately to ensure consistency between the form model
        // and what's displayed in the UI
        numericValues.Clear();
        foreach (var field in formModel.InputFields)
        {
            if (field.InputType == "number")
            {
                if (int.TryParse(field.Value, out int val))
                {
                    numericValues[field.Id] = val;
                }
                else
                {
                    numericValues[field.Id] = null;
                }
            }
        }

        // Hide form data section if it was visible
        showFormData = false;
    }

    private FormModel CloneFormModel(FormModel source)
    {
        var clone = new FormModel
            {
                Title = source.Title,
                InputFields = new List<InputField>(),
                DropdownFields = new List<DropdownField>(),
                CheckboxFields = new List<CheckboxField>()
            };

        foreach (var field in source.InputFields)
        {
            clone.InputFields.Add(new InputField
                {
                    Id = field.Id,
                    Label = field.Label,
                    InputType = field.InputType,
                    IsRequired = field.IsRequired,
                    Min = field.Min,
                    Max = field.Max,
                    Value = field.Value
                });
        }

        foreach (var field in source.DropdownFields)
        {
            clone.DropdownFields.Add(new DropdownField
                {
                    Id = field.Id,
                    Label = field.Label,
                    IsRequired = field.IsRequired,
                    SelectedValue = field.SelectedValue,
                    Options = new List<string>(field.Options)
                });
        }

        foreach (var field in source.CheckboxFields)
        {
            clone.CheckboxFields.Add(new CheckboxField
                {
                    Id = field.Id,
                    Label = field.Label,
                    IsRequired = field.IsRequired,
                    IsChecked = field.IsChecked
                });
        }

        return clone;
    }

    private void UpdateNumericFieldValue(InputField field)
    {
        if (numericValues.TryGetValue(field.Id, out int? value))
        {
            field.Value = value?.ToString() ?? string.Empty;
        }
    }

    /// <summary>
    /// Creates a field-specific email validation function.
    /// </summary>
    /// <param name="field">The input field to validate</param>
    /// <returns>A function that takes a string value and returns an error message (or null if valid)</returns>
    private Func<string, string> GetEmailValidator(InputField field)
    {
        // This returns a lambda function that captures the specific field
        // The returned function follows the signature expected by MudBlazor's validation system (string -> string)
        return value => ValidateEmail(field, value);
    }

    private string ValidateEmail(InputField field, string value)
    {
        if (field.IsRequired && string.IsNullOrWhiteSpace(value))
        {
            return $"{field.Label} is required.";
        }

        if (!string.IsNullOrWhiteSpace(value) && !IsValidEmail(value))
        {
            return "Please enter a valid email address.";
        }

        return null;
    }

    private void HandleValidSubmit()
    {
        // Process the form data and generate JSON
        var formData = new Dictionary<string, object>();

        foreach (var field in formModel.InputFields)
        {
            if (field.InputType == "number" && !string.IsNullOrEmpty(field.Value) && int.TryParse(field.Value, out int numValue))
            {
                // Convert number values to actual numbers in JSON
                formData[field.Label] = numValue;
            }
            else
            {
                formData[field.Label] = field.Value;
            }
        }

        foreach (var dropdown in formModel.DropdownFields)
        {
            formData[dropdown.Label] = dropdown.SelectedValue;
        }

        foreach (var checkbox in formModel.CheckboxFields)
        {
            formData[checkbox.Label] = checkbox.IsChecked;
        }

        // Format JSON with indentation
        var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

        formDataJson = JsonSerializer.Serialize(formData, options);
        showFormData = true;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task ReloadForm()
    {
        isLoading = true;
        hasError = false;
        errorMessage = string.Empty;
        showFormData = false;

        await OnInitializedAsync();
    }


}