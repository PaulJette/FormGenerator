@page "/"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using FormGenerator.Models
@using FormGenerator.Services.Interfaces
@using FormGenerator.Components
@using FormGenerator.Components.Form
@using FormGenerator.Components.CustomValidation
@using MudBlazor

@inject IFormStateService FormState
@inject IFormValidationService Validator
@inject IFormDataProcessingService DataProcessor
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h4" Class="my-4">@FormState.CurrentForm.Title</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (hasError)
    {
        <ErrorHandling Title="Form Configuration Error"
                       Message="There was a problem loading the form configuration."
                       DetailedError="@errorMessage"
                       AlertType="error"
                       OnRetry="ReloadForm" />
    }
    else
    {
        <EditForm EditContext="@FormState.EditContext" OnSubmit="HandleSubmit" FormName="dynamicForm">
            <DataAnnotationsValidator />
            <FormValidator @ref="formValidator" />

            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <InputFieldsSection InputFields="@FormState.CurrentForm.InputFields" />
                        <DropdownFieldsSection DropdownFields="@FormState.CurrentForm.DropdownFields" />
                        <CheckboxFieldsSection CheckboxFields="@FormState.CurrentForm.CheckboxFields" />
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Submit</MudButton>
                    <MudButton OnClick="ResetForm" Variant="Variant.Outlined" Color="Color.Secondary">Reset</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    /// <summary>
    /// Path to JSON form definition
    /// </summary>
    private const string JsonFilePath = "formConfig.json";

    private FormValidator formValidator;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = string.Empty;

    /// <summary>
    /// Load form when component initializes
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FormState.InitializeFormAsync(JsonFilePath);
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            hasError = true;
            errorMessage = ex.ToString();
        }
    }

    /// <summary>
    /// Reset form to initial state
    /// </summary>
    private void ResetForm()
    {
        FormState.ResetForm();
    }

    /// <summary>
    /// Handle form submission
    /// </summary>
    private void HandleSubmit()
    {
        FormState.IsFormSubmitted = true;
        StateHasChanged(); // Force UI update for validation

        if (Validator.ValidateForm(FormState.CurrentForm, FormState.EditContext))
        {
            string formDataJson = DataProcessor.ProcessFormData(
                FormState.CurrentForm,
                FormState.NumericValues);

            // Show dialog with form data instead of adding it to the page
            var parameters = new DialogParameters
            {
                { "FormData", formDataJson },
                { "Title", "" }
            };

            DialogService.ShowAsync<FormSubmissionDialog>("Form Submission Result", parameters,
                new DialogOptions
                    {
                        MaxWidth = MaxWidth.Medium,
                        FullWidth = true,
                        CloseButton = true
                    });
        }
    }

    /// <summary>
    /// Reload the form
    /// </summary>
    private async Task ReloadForm()
    {
        isLoading = true;
        hasError = false;
        errorMessage = string.Empty;
        FormState.IsFormSubmitted = false;

        await OnInitializedAsync();
    }
}